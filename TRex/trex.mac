	;
	;	T. Rex game for MK 90
	;	Alexander Zakharyan
	;	2019
	;

	.ENABL AMA
	.ASECT
	.RADIX 10

	.= 0

	PRINTATTRS = ^O34072
	PRINTNUM = ^O153360 
	PRINT = ^O153414 
	INITRAM = ^O153700
	INITTTY = ^O120536
	LCDINA = ^O164000
	LCDINB = ^O164002
	WAITCOMM = ^O174506
	SMPCMD = ^O164026
	SMPBAUD = ^O164022
	SMPCS = ^O164024
	SMPIO = ^O164020
	GETCH = ^O131120
	PUTCH = ^O116542
	RTCSEC = ^O165000
	RTCMIN = ^O165004

	nop
	br loader

	.= 32
loader:

	mov #SCREEN, r4
	mov	#SCREEN_SIZE_W, r3
loaderClearScreenLoop:
	clr	(r4)+
	sob	r3, loaderClearScreenLoop

	mov	#SCREEN, @#LCDINA
	mov #^B1000100011000110, @#LCDINB	;26Hz
	

	;Loader copyed from Game of Life app of Piotr Piatek
	; specify the SMP address
	mtps #^O340		;disable interrupts
	bis	#8, r5		;writing to the SMP
change:
	mov	r5,(r1)
	mov	#1245, @#change
	mov	#^O240, @#SMPCMD	;Write Address
	jsr	pc,(r2)
	mov #start/256, @#SMPIO	;high address byte
	jsr	pc,(r2)
	mov #start, @#SMPIO	;high address byte
	jsr	pc, (r2)
	tst	@#SMPCMD
	jsr	pc, (r2)
	; load data
	mov	#END-START, r4		;number of bytes
	mov	#START, r3
	mov	#^O320, @#SMPCMD	;Read Postincrement
	jsr	pc, (r2)
	bic	#8, r5		;reading from the SMP
	mov	r5, (r1)
	jsr	pc, (r2)
nxtb:	
	movb @#SMPIO, (r3)+	;read data byte from the SMP to the RAM
	jsr	pc, (r2)
	sob	r4, nxtb		;next data byte
	tst	@#SMPCMD
	jsr	pc, (r2)
	; start the loaded program
	mov	#^O340, -(sp)	;user mode, interrupts disabled
	;mov	#^O000, -(sp)	;user mode, interrupts enable
	mov	#start, -(sp)
	rti



	SCREEN = 10240
	SCRBUF = 11200
	SCREEN_WIDTH_B = 30
	SCREEN_WIDTH_W = SCREEN_WIDTH_B/2
	SCREEN_SIZE_B = 960
	SCREEN_SIZE_W = SCREEN_SIZE_B/2
	SCREEN_HEIGHT = 64
	SCREEN_WIDTH = 120


	.= 200
	.word keyIntHandle, 0

	.= 512

START:
	bic	#^B00010000, @#SMPCS	;enables external interrupts to the vector $00C8

	movb #^B01010111, @#^O165024	;32 fps
	clrb @#^O165026	;Without IRQ 

mainScreen:
	mov #netPodklucheniyaXdef, @#netPodklucheniyaX
	mov #kInternetuXdef, @#kInternetuX
	mov #azya2019Xdef, @#azya2019X
	mov #2, r4
mainScreenLoop:
	mov r4, -(sp)
	mov r4, @#drawBitmapDrawWidthValue+2

	jsr pc, clearScreen
	jsr pc, updateEnvironment
	jsr pc, updateTrex

	mov #SCREEN_WIDTH_W, @#drawBitmapDrawWidthValue+2
	mov #netPodklucheniya, r1
	mov @#netPodklucheniyaX, r4
	mov #netPodklucheniyaY, r0 
	jsr pc, drawStaticSprite
	mov #kInternetu, r1
	mov @#kInternetuX, r4
	mov #kInternetuY, r0 
	jsr pc, drawStaticSprite
	mov #azya2019, r1
	mov @#azya2019X, r4
	mov #azya2019Y, r0 
	jsr pc, drawStaticSprite

	jsr	pc, copyScreen

	mov (sp)+, r4

	cmp r4, #2
	bne notWaitKey
	MTPS #^O000
	wait
notWaitKey:
	jsr	pc, beepAndDelay

	add #6, @#netPodklucheniyaX
	add #6, @#kInternetuX
	add #6, @#azya2019X
	inc r4
	cmp r4, #SCREEN_WIDTH_W
	bne mainScreenLoop

newGame:
	cmp @#TRexCheck, #TRexSignature
	beq notClearHiScore
	mov #TRexSignature, @#TRexCheck
	clr @#hiScore
notClearHiScore:
	clr @#collisionFlag
	clr @#scores
	clr @#scoreAnimation
	mov #levelMin, @#level
	mov #levelMin+1, @#level+2
	mov #firstCactusX, r5
	mov #SCREEN_WIDTH, (r5)
	jsr pc, randomCactus
	mov #-btmCactusMaxWidth, @#secondCactusX

main:
	jsr pc, clearScreen
	jsr pc, updateCactuses
	jsr pc, updateTrex
	jsr pc, updateEnvironment
	jsr pc, updateScores
	jsr pc, copyScreen

	jsr pc, beepAndDelay

	tst @#collisionFlag
	beq main
	;br main

gameOver:
	jsr pc, copyScreen
	mov #gameOverStr, r1
	mov #gameOverStrX, r4
	mov #gameOverStrY, r0 
	jsr pc, drawStaticSprite
	jsr pc, copyScreen ;double for nightMode

	mov #boomBeep, @#beepFreqArd
	
	cmp @#scores, @#hiScore
	ble notSaveHiScore
	mov @#scores, @#hiScore
notSaveHiScore:

	mov #10, r5
waitWhileCameToHisSenses:
	jsr	pc, beepAndDelay
	sob r5, waitWhileCameToHisSenses

	wait
	br newGame

beepAndDelay:
	jsr pc, beep	
delay:
	tstb @#^O165030		;RTC, register 0C
	bpl	delay
	clrb @#^O165030
	rts pc

beep::
	mov @#beepFreqArd, r0
	tst (r0)
	bmi beepExit
	add #2, @#beepFreqArd
	tst (r0)
	beq beepExit
	mov #^B11111011, @#SMPCS
	mov (r0), @#SMPBAUD
	tst	@#SMPCMD
	clrb @#SMPCMD
waitSend:
	tstb @#SMPCS
	bpl waitSend
	tst	@#SMPCMD
	mov #^B11100011, @#SMPCS
beepExit:
	rts pc

keyIntHandle:
	movb #^O342,@#SMPCS
	mov #8, @#SMPBAUD
	clrb @#SMPCMD		;start of the transfer
keyIntHandleWait:
	tstb @#SMPCS
	bpl	keyIntHandleWait
	tst	@#SMPCMD		;end of the transfer

	cmp #trexTrack, @#trexPosition
	bne keyIntHandleEnd

	mov #trexTilted, @#currentTrex
	cmpb @#SMPIO, #95
	beq keyIntHandleEnd

	mov #jumpBeep, @#beepFreqArd

	mov #trex, @#currentTrex
	mov #trexTrackEnd-1, @#trexPosition
keyIntHandleEnd:
	mov	#^B11100010, @#SMPCS
	rti 


updateTrex:
	mov #trexFoot, r4
	mov @#trexPosition, r1
	movb (r1), r1
	beq trexRun
	;jumping
	mov #trexFootBoth, (r4)
	dec @#trexPosition
	jsr pc, randomize ;more random
	br drawTrex
	
trexRun:
	dec @#trexFootChange
	bge drawTrex
	mov #trexFootChangeDelay, @#trexFootChange
	cmp #trexFootLeft, (r4)
	beq trexSetFootRight
	mov #trexFootLeft, (r4)
	br drawTrex
trexSetFootRight:
	mov #trexFootRight, (r4)

drawTrex:
	mov @#currentTrex, r0
	movb (r0)+, r2
	add r2, r1
	sub #SCREEN_HEIGHT-trexFootHeight, r1
	neg r1
	
	mul #SCREEN_WIDTH_B, r1
	add #SCRBUF, r1
	mov #SCRBUF+SCREEN_SIZE_B, r5 ;calc middle screen
	jsr pc, drawLoop

	mov (r4), r0
	mov #trexFootHeight, r2
drawLoop:
	cmp r1, r5
	blt drawMovStr
	sub #SCREEN_WIDTH_B*SCREEN_HEIGHT/2-1, r1
drawMovStr:

	mov #3, r3
drawStrLoop:
	bitb (r0), (r1)
	beq noCollision1
	inc @#collisionFlag
noCollision1:
	bisb (r0)+, (r1)+
	inc r1
	sob r3, drawStrLoop

	add #SCREEN_WIDTH_B-6, r1
	sob r2, drawLoop
	rts pc


updateCactuses:
	mov #firstCactus, r5
	jsr pc, updateCactus
	mov #secondCactus, r5

updateCactus:
	sub @#level, (r5) ;shift cactus
	cmp (r5), #-btmCactusMaxWidth
	bgt updateCactusEnd

getLastCactusX:
	clr (r5)
	clr r3
	add @#firstCactusX, r3
	add @#secondCactusX, r3
	mov r3, (r5)

randomCactus:
	jsr pc, random
	mov r3, r2
	add @#level, r3
	ash #4, r3
	add #SCREEN_WIDTH/2+btmCactusMaxWidth-48, r3	;next cactus always off screen
	add r3, (r5)+

	cmp @#level, #simpleLevelTo
	bgt allCactuses
	bic #^O177774, r2
allCactuses:
	ash #2, r2
	add #cactuses, r2

	mov (r2)+, (r5)+
	mov (r2), (r5)

	sub #4, r5
updateCactusEnd:
	br drawSprite


updateEnvironment:

updateClouds:
	mov #firstCloud, r5
updateCloud:
	dec (r5) ;shift cloud
	cmp (r5), #-btmCloudWidth
	bgt updateCloudNext

getLastCloudX:
	mov @#firstCloudX, (r5)
	cmp (r5), @#secondCloudX
	bge 1$
	mov @#secondCloudX, (r5)
1$:
	cmp (r5), @#lastCloudX
	bge 2$
	mov @#lastCloudX, (r5)
2$:
	
	jsr pc, random
	asl r3
	add r3, (r5)
	add r3, (r5)
	add #SCREEN_WIDTH-btmCloudWidth/2, (r5)	;next cloud always off screen

	add #8, r3	;score offset
	mul #SCREEN_WIDTH_B, r3
	add #SCRBUF, r3
	mov r3, 2(r5)

updateCloudNext:
	mov r5, -(sp)
	jsr pc, drawSprite
	mov (sp)+, r5

	add #6, r5	;ground sctuct size
	cmp r5, #lastCloud
	ble updateCloud


updateGrounds:
	mov #firstGround, r5
updateGround:
	sub @#level, (r5)  ;shift ground
	cmp (r5), #-btmGroundWidth
	bgt updateGroundDraw
	add #btmGroundWidth*4, (r5)+
	jsr pc, random
	dec r3
	bgt updateGroundFlat
updateGroundHill:
	mov #btmGroundHillY, (r5)+
	mov #btmGroundHill, (r5)+
	br updateGroundNext
updateGroundFlat:
	mov #btmGroundFlatY, (r5)+
	mov #btmGroundFlat, (r5)+
updateGroundNext:
	sub #6, r5

updateGroundDraw:
	mov r5, -(sp)
	jsr pc, drawSprite
	mov (sp)+, r5

	add #6, r5	;ground sctuct size

	cmp r5, #fourthGround
	ble updateGround

updateStars:
	tst @#nightModeFlag
	bmi withoutStars

	mov #starSprite1, r5
	jsr pc, drawSprite
	
	mov #starSprite2, r5
	jsr pc, drawSprite
	
	mov #moonSprite, r5
	br drawSprite
withoutStars:
	rts pc

drawSprite:
	mov (r5)+, r4
	mov (r5)+, r0
	mov (r5)+, r1 ;bitmap
	movb (r1)+, r3 ;animationSize
	beq drawStaticSprite
 
drawAnimSprite:
	sub #2, (r5)	
	bgt drawAnimSpriteNextFrame
	mov r3, (r5)
drawAnimSpriteNextFrame:
	add (r5), r1
	mov (r1), r1

drawStaticSprite:
	movb (r1)+, r3
	movb (r1)+, r2

	; r0 - top Y*scrWidth+scrAddr pos on screen
	; r1 - bitmap addr
	; r2 - height in pixels
	; r3 - width in bytes
	; r4 - left X pos on screen in pixels
drawBitmap:
    mov r4, r5
    bic #^O177770, r4
    neg r4
    add #8, r4
    ash #-3, r5
 
    mov r3, -(sp)
drawBitmapLineLoop:
    inc r5
    blt drawBitmapNextRow
    beq drawBitmapRowLeft
drawBitmapDrawWidthValue:
    cmp r5, #SCREEN_WIDTH_W
    blt drawBitmapRowMiddle
    bgt drawBitmapEnd

drawBitmapRowRight:	
    asl r5
    add r5, r0
    tst -(r0)
drawBitmapRowRightLoop:
	clr r5
 	bisb (r1), r5
    ash r4, r5
	swab r5
    bisb r5, (r0)
    add #SCREEN_WIDTH_B, r0
    add r3, r1
    sob r2, drawBitmapRowRightLoop
    br drawBitmapEnd

drawBitmapRowLeft:
	mov r0, -(sp)
   	mov r1, -(sp)
    mov r2, -(sp)
	mov r5, -(sp)			
    asl r5
    add r5, r0
drawBitmapRowLeftLoop:
 	movb (r1), r5
    ash r4, r5
    bisb r5, (r0)
    add #SCREEN_WIDTH_B, r0
    add r3, r1
    sob r2, drawBitmapRowLeftLoop
    br drawBitmapRowEnd

drawBitmapRowMiddle:
	mov r0, -(sp)
   	mov r1, -(sp)
    mov r2, -(sp)
	mov r5, -(sp)			
    asl r5
    add r5, r0
drawBitmapRowMiddleLoop:
	clr r5
 	bisb (r1), r5
    ash r4, r5
    bisb r5, (r0)
	swab r5
    bisb r5, -2(r0)
    add #SCREEN_WIDTH_B, r0
    add r3, r1
    sob r2, drawBitmapRowMiddleLoop

drawBitmapRowEnd:
    mov (sp)+, r5
 	mov (sp)+, r2
 	mov (sp)+, r1
    mov (sp)+, r0
drawBitmapNextRow:
	inc r1
	dec (sp)
	bne drawBitmapLineLoop

drawBitmapEnd:
	tst (sp)+
	rts pc

clearScreen:
	mov	#SCRBUF,r0
	mov	#SCREEN_HEIGHT/2,r1
clearScreenLoop:
	.REPT 15
	clr	(r0)+
	.ENDM
	sob	r1,clearScreenLoop
	rts	pc


copyScreen:
	mov	#SCREEN, r0
	mov	#SCRBUF, r1
	mov	#SCREEN_SIZE_W,r2
copyScreenLoop:
nightMode:
	nop
	mov	(r1)+, (r0)+
	sob	r2,copyScreenLoop
	rts	pc


randomize:
	add @#RTCSEC, @#random+2	;RTC, seconds

random:
	mov #0, r3 ;@#random+2
	ash #2, r3 ;*4
	add #5, r3
	clr r2
	div #9, r2
	mov r3, @#random+2
	;mov #3, r3	;test
	rts pc


updateScores:
	;exchange for smooth inc speed
	mov #level, r5 
	mov (r5), r0
	mov 2(r5), (r5)
	mov r0, 2(r5)

	;score change delay
	dec @#scoresChange
	bge drawScores
	mov #levelMax+1, @#scoresChange
	sub @#level, @#scoresChange
	
	inc @#scores
	mov @#scores, r1
	clr r0
	div #100, r0
	tst r1
	bne drawScores

	movb #scoreAnimationLength, @#scoreAnimation
	mov #scoreBeep, @#beepFreqArd

	cmp (r5)+, (r5)
	bge incLevel
	tst -(r5) ;r5-2
incLevel:
	cmp (r5), #levelMax
	bge updateNightMode
	inc (r5)

updateNightMode:
	dec @#nightModeFlag
	bpl drawScores
	mov #^O240, @#nightMode ;nop
	mov r0, r1
	clr r0
	div #7, r0
	tst r1
	bne drawScores
	mov #^O5111, @#nightMode ;com (r1)
	mov #1, @#nightModeFlag

drawScores:
	tst @#collisionFlag
	bne drawScore
	mov #scoreAnimation, r0
	tstb (r0)
	beq drawScore
	decb (r0)
	bitb #^B1000, (r0)
	bne drawSlash

drawScore:
	mov @#scores, r1
	mov #SCRBUF+28, r4
	jsr pc, drawNumberLoop

drawZero:
	jsr pc, drawNumber
	cmp r4, #SCRBUF+18
	bgt drawZero

drawSlash:
	clr r0
	mov #slash, r1
	mov #SCRBUF+18, r4
	jsr pc, drawNumberCopyBitmap
	
	mov @#hiScore, r1

drawNumberLoop:	
	clr r0
	div #10, r0

drawNumber:	
	movb chars(r1), r1
	add #chars, r1

drawNumberCopyBitmap:
	mov #6, r3
drawBestScore: 
	bisb (r1)+, (r4)
	add #SCREEN_WIDTH_B, r4
	sob r3, drawBestScore
	sub #SCREEN_WIDTH_B*6+2, r4
	
	mov r0, r1
	bne drawNumberLoop
	rts pc



	levelMin = 2
	simpleLevelTo = 3
	levelMax = 5
level:
	.word levelMin, levelMin+1

scores:
	.word 0

collisionFlag:
	.word 0

nightModeFlag:
	.word -1
	
boomBeep:
	.word 2800, 0, 0, 0, 2800, -1

scoreBeep:
	.word 1200, 0, 0, 0, 1200, -1

jumpBeep:
	.word 1600, -1

beepFreqArd:
	.word jumpBeep

scoresChange:
	.word 0

trexPosition:
	.word trexTrack
trexTrack:
	.byte 0, 11, 19, 25, 29, 32, 35, 37, 39, 41, 42, 41, 39, 37, 35, 32, 29, 25, 19, 11
trexTrackEnd:

trexFoot:
	.word trexFootBoth

	trexFootChangeDelay = 3
trexFootChange:
	.word trexFootChangeDelay

currentTrex:
	.word trex

trex:
	.byte 16
	.byte ^B00000000,^B00011111,^B11000000
	.byte ^B00000000,^B00110111,^B11100000
	.byte ^B00000000,^B00111111,^B11100000
	.byte ^B00000000,^B00111111,^B11100000
	.byte ^B00000000,^B00111111,^B11100000
	.byte ^B00000000,^B00111110,^B00000000
	.byte ^B00000000,^B00111111,^B10000000
	.byte ^B00000000,^B01111100,^B00000000
	.byte ^B01000001,^B11111100,^B00000000
	.byte ^B01000011,^B11111111,^B00000000
	.byte ^B01100111,^B11111101,^B00000000
	.byte ^B01111111,^B11111100,^B00000000
	.byte ^B01111111,^B11111000,^B00000000
	.byte ^B00111111,^B11111000,^B00000000
	.byte ^B00011111,^B11110000,^B00000000
	.byte ^B00001111,^B11100000,^B00000000

trexTilted:
	.byte 9
	.byte ^B01000000,^B00000000,^B11111110
	.byte ^B01110001,^B11111001,^B10111111
	.byte ^B01111111,^B11111111,^B11111111
	.byte ^B00111111,^B11111111,^B11111111
	.byte ^B00011111,^B11111111,^B11111111
	.byte ^B00001111,^B11111111,^B11110000
	.byte ^B00000111,^B11111101,^B11111100
	.byte ^B00000111,^B11110100,^B00000000
	.byte ^B00000011,^B11100000,^B00000000

	trexFootHeight = 4
trexFootLeft:
	.byte ^B00000111,^B00110000,^B00000000
	.byte ^B00000110,^B00000000,^B00000000
	.byte ^B00000100,^B00000000,^B00000000
	.byte ^B00000110,^B00000000,^B00000000

trexFootRight:
	.byte ^B00000110,^B01100000,^B00000000
	.byte ^B00000011,^B00100000,^B00000000
	.byte ^B00000000,^B00100000,^B00000000
	.byte ^B00000000,^B00110000,^B00000000

trexFootBoth:
	.byte ^B00000111,^B01100000,^B00000000
	.byte ^B00000110,^B00100000,^B00000000
	.byte ^B00000100,^B00100000,^B00000000
	.byte ^B00000110,^B00110000,^B00000000

	.EVEN
btmCactusMaxWidth = 32

firstCactus:
firstCactusX:
	.word -btmCactusMaxWidth	;X
	.word 0; screen pos
irstCactusBitmap:
	.word 0 ; framesArray
	.word 0 ;frameId
	
secondCactus:
secondCactusX:
	.word -btmCactusMaxWidth	;X
secondCactusY:
	.word 0; screen pos
secondCactusBitmap:
	.word 0 ; framesArray
	.word 0 ;frameId

cactuses:

cactusSmallX1:
	.word 32-15*15*2+SCRBUF+1; screen pos
	.word btmCactusSmallX1 ; framesArray

cactusSmallX2:
	.word 32-15*15*2+SCRBUF+1; screen pos
	.word btmCactusSmallX2 ; framesArray

cactusSmallX3:
	.word 32-15*15*2+SCRBUF+1; screen pos Y
	.word btmCactusSmallX3 ; framesArray

cactusBigX1:
	.word 32-21*15*2+SCRBUF+1; screen pos
	.word btmCactusBigX1 ; framesArray

cactusBigX2:
	.word 32-21*15*2+SCRBUF+1; screen pos
	.word btmCactusBigX2 ; framesArray

cactusBigX3:
	.word 32-21*15*2+SCRBUF+1; screen pos
	.word btmCactusBigX3 ; framesArray

birdTop:
	.word 32-16*15*2+SCRBUF; screen pos
	.word birdFrames ; framesArray

birdMiddle:
	.word 15*2+SCRBUF+1; screen pos
	.word birdFrames ; framesArray

birdBottom:
	.word 32-16*15*2+SCRBUF+1; screen pos
	.word birdFrames ; framesArray

btmCactusSmallX3:
	.byte 0; frames
	.byte 3; width
	.byte 15; height
	.byte ^B00011000, ^B00110000, ^B01100000	
	.byte ^B00011000, ^B00110001, ^B01100000
	.byte ^B00011010, ^B10110001, ^B01101000	
	.byte ^B00011010, ^B10110001, ^B01101100
	.byte ^B01011010, ^B10110101, ^B01101100
	.byte ^B11011010, ^B10110101, ^B01101100
	.byte ^B11011010, ^B10110101, ^B01101100
	.byte ^B11011010, ^B10110101, ^B01101100
	.byte ^B11011110, ^B10110101, ^B11101100
	.byte ^B11011000, ^B11110100, ^B01111000
	.byte ^B01111000, ^B01111000, ^B01100000
	.byte ^B00011000, ^B00110000, ^B01100000
	.byte ^B00011000, ^B00110000, ^B01100000
	.byte ^B00011001, ^B00110000, ^B01100000
	.byte ^B00011000, ^B00110010, ^B01100010

btmCactusSmallX2:
	.byte 0; frames
	.byte 2; width
	.byte 15; height
	.byte ^B00011000, ^B00110000	
	.byte ^B00011000, ^B00110000
	.byte ^B00011010, ^B10110100	
	.byte ^B00011010, ^B10110110
	.byte ^B01011010, ^B10110110
	.byte ^B11011010, ^B10110110
	.byte ^B11011010, ^B10110110
	.byte ^B11011010, ^B11110110
	.byte ^B11011110, ^B00110110
	.byte ^B11011000, ^B00111100
	.byte ^B01111000, ^B00110000
	.byte ^B00011000, ^B00110000
	.byte ^B00011000, ^B00110000
	.byte ^B00011001, ^B00110000
	.byte ^B00011000, ^B00110010

btmCactusSmallX1:
	.byte 0; frames
	.byte 1; width
	.byte 15; height
	.byte ^B00011000	
	.byte ^B00011000
	.byte ^B00011010	
	.byte ^B00011011
	.byte ^B01011011
	.byte ^B11011011
	.byte ^B11011011
	.byte ^B11011011
	.byte ^B11011110
	.byte ^B11011000
	.byte ^B01111000
	.byte ^B00011000
	.byte ^B00011000
	.byte ^B00011001
	.byte ^B00011000

btmCactusBigX1:
	.byte 0; frames
	.byte 2; width
	.byte 20; height
	.byte ^B00001000, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B01011101, ^B00000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11011101, ^B10000000
	.byte ^B11111111, ^B00000000
	.byte ^B01111100, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B00011100, ^B00000000
	.byte ^B00011101, ^B00000000
	.byte ^B01011100, ^B00000100

btmCactusBigX2:
	.byte 0; frames
	.byte 3; width
	.byte 20; height
	.byte ^B00001000, ^B00000010, ^B00000000
	.byte ^B00011100, ^B00110111, ^B00000000
	.byte ^B00011100, ^B00110111, ^B00000000
	.byte ^B01011101, ^B00110111, ^B01000000
	.byte ^B11011101, ^B10110111, ^B01100000
	.byte ^B11011101, ^B10110111, ^B01100000
	.byte ^B11011101, ^B10110111, ^B01100000
	.byte ^B11011101, ^B10110111, ^B01100000
	.byte ^B11011101, ^B10111111, ^B01100000
	.byte ^B11011101, ^B10111111, ^B01100000
	.byte ^B11011101, ^B10011111, ^B01100000
	.byte ^B11011101, ^B10000111, ^B11100000
	.byte ^B11111111, ^B00000111, ^B10000000
	.byte ^B01111100, ^B00000111, ^B00000000
	.byte ^B00011100, ^B00000111, ^B00000000
	.byte ^B00011100, ^B00000111, ^B00000000
	.byte ^B00011100, ^B00000111, ^B00000000
	.byte ^B00011100, ^B00000111, ^B00000000
	.byte ^B00011100, ^B01000111, ^B00000000
	.byte ^B01011100, ^B00000111, ^B00000100

btmCactusBigX3:
	.byte 0; frames
	.byte 4; width
	.byte 20; height
	.byte ^B00001000, ^B00000000, ^B00000000, ^B00100000
	.byte ^B00011100, ^B00000110, ^B00000011, ^B01110000
	.byte ^B00011100, ^B00000110, ^B01000011, ^B01110000
	.byte ^B01011101, ^B00000110, ^B01000011, ^B01110100
	.byte ^B11011101, ^B10000110, ^B01000011, ^B01110110
	.byte ^B11011101, ^B10000110, ^B01000011, ^B01110110
	.byte ^B11011101, ^B10010110, ^B01000011, ^B01110110
	.byte ^B11011101, ^B10110111, ^B11000011, ^B01110110
	.byte ^B11011101, ^B10110110, ^B00000011, ^B11110110
	.byte ^B11011101, ^B10110110, ^B00110011, ^B11110110
	.byte ^B11011101, ^B10110110, ^B10110101, ^B11110110
	.byte ^B11011101, ^B10110110, ^B10110100, ^B01111110
	.byte ^B11111111, ^B00110110, ^B10110100, ^B01111000
	.byte ^B01111100, ^B00111110, ^B10110100, ^B01110000
	.byte ^B00011100, ^B00011110, ^B10110100, ^B01110000
	.byte ^B00011100, ^B00000110, ^B11111100, ^B01110000
	.byte ^B00011100, ^B00000110, ^B00110000, ^B01110000
	.byte ^B00011100, ^B00000110, ^B00110000, ^B01110000
	.byte ^B00011100, ^B01000110, ^B00110000, ^B01110000
	.byte ^B01011100, ^B00000110, ^B00110001, ^B01110001

	btmCloudWidth = 24
btmCloud:
	.byte 0 ;animationSize
	.byte 3; width
	.byte 6; height
	.byte ^B00000000,^B01111100,^B00000000	
	.byte ^B00000000,^B10000010,^B00000000	
	.byte ^B00000011,^B00000011,^B11000000	
	.byte ^B00111100,^B00000100,^B00110000	
	.byte ^B01000000,^B00000000,^B00001000	
	.byte ^B11111111,^B11111111,^B11111100	

	.ODD
birdFrames:
	.byte birdFrameArrayEnd-birdFrameArray-2 ;animationSize
birdFrameArray:
	.word btmBirdFrame1, btmBirdFrame1, btmBirdFrame1, btmBirdFrame1, btmBirdFrame1, btmBirdFrame1
				btmBirdFrame2, btmBirdFrame2, btmBirdFrame2, btmBirdFrame2, btmBirdFrame2, btmBirdFrame2
birdFrameArrayEnd:

btmBirdFrame1:
	.byte 3; width
	.byte 12; height
	.byte ^B00000001, ^B00000000, ^B00000000
	.byte ^B00000001, ^B10000000, ^B00000000
	.byte ^B00001101, ^B11000000, ^B00000000
	.byte ^B00011100, ^B11100000, ^B00000000
	.byte ^B00111110, ^B11110000, ^B00000000
	.byte ^B01111110, ^B11111000, ^B00000000
	.byte ^B11111111, ^B11111100, ^B00000000
	.byte ^B00000011, ^B11111110, ^B00000000
	.byte ^B00000001, ^B11111111, ^B11110000
	.byte ^B00000000, ^B01111111, ^B10000000
	.byte ^B00000000, ^B00111111, ^B11100000
	.byte ^B00000000, ^B00011111, ^B00000000

btmBirdFrame2:
	.byte 3; width
	.byte 16; height
	.byte ^B00000000, ^B00000000, ^B00000000
	.byte ^B00000000, ^B00000000, ^B00000000
	.byte ^B00001100, ^B00000000, ^B00000000
	.byte ^B00011100, ^B00000000, ^B00000000
	.byte ^B00111110, ^B00000000, ^B00000000
	.byte ^B01111110, ^B00000000, ^B00000000
	.byte ^B11111111, ^B11111110, ^B00000000
	.byte ^B00000011, ^B11111111, ^B00000000
	.byte ^B00000001, ^B11111111, ^B11110000
	.byte ^B00000000, ^B11111111, ^B10000000
	.byte ^B00000000, ^B11111111, ^B11100000
	.byte ^B00000000, ^B11111111, ^B00000000
	.byte ^B00000000, ^B11110000, ^B00000000
	.byte ^B00000000, ^B11100000, ^B00000000
	.byte ^B00000000, ^B11000000, ^B00000000
	.byte ^B00000000, ^B10000000, ^B00000000

firstCloud:
firstCloudX:
	.word -btmCloudWidth	
firstCloudY:
	.word 0	
	.word btmCloud ; framesArray

secondCloud:
secondCloudX:
	.word -btmCloudWidth
secondCloudY:
	.word 0
	.word btmCloud ; framesArray

lastCloud:	
lastCloudX:
	.word -btmCloudWidth
lastCloudY:
	.word 0
	.word btmCloud ; framesArray

firstGround:
firstGroundX:
	.word 0	
firstGroundY:
	.word btmGroundFlatY
	.word btmGroundFlat ; framesArray

secondGround:
secondGroundX:
	.word btmGroundWidth	
secondGroundY:
	.word btmGroundFlatY
	.word btmGroundFlat ; framesArray

thirdGround:
thirdGroundX:
	.word btmGroundWidth*2
thirdGroundY:
	.word btmGroundFlatY
	.word btmGroundFlat ; framesArray

fourthGround:
fourthGroundX:
	.word -btmGroundWidth
fourthGroundY:
	.word btmGroundHillY
	.word btmGroundHill ; framesArray

starSprite1:
starSprite1X:
	.word 65
starSprite1Y:
	.word 12*15*2+SCRBUF
	.word starFrames ; framesArray
	.word 0

starSprite2:
starSprite2X:
	.word 20
starSprite2Y:
	.word 22*15*2+SCRBUF
	.word starFrames ; framesArray
	.word 0

moonSprite:
moonSpriteX:
	.word 97
moonSpriteY:
	.word 12*15*2+SCRBUF
	.word moon ; framesArray

	.ODD
starFrames:
	.byte starFrameArrayEnd-starFrameArray-2 ;animationSize
starFrameArray:
	.word star1, star1, star2, star2, star3, star3, star2, star2
starFrameArrayEnd:

star1:
	.byte 1; width
	.byte 6; height
	.byte ^B00000000
	.byte ^B00010000
	.byte ^B00111000
	.byte ^B01111100
	.byte ^B00111000
	.byte ^B00010000
star2:
	.byte 1; width
	.byte 6; height
	.byte ^B00000000
	.byte ^B01010100
	.byte ^B00111000
	.byte ^B01111100
	.byte ^B00111000
	.byte ^B01010100
star3:
	.byte 1; width
	.byte 7; height
	.byte ^B00010000
	.byte ^B01010100
	.byte ^B00111000
	.byte ^B11111110
	.byte ^B00111000
	.byte ^B01010100
	.byte ^B00010000

moon:
	.byte 0
	.byte 1; width
	.byte 16; height
	.byte ^B11000000
	.byte ^B01110000
	.byte ^B00111000
	.byte ^B00111100
	.byte ^B00011100
	.byte ^B00011110
	.byte ^B00011110
	.byte ^B00011110
	.byte ^B00011110
	.byte ^B00011110
	.byte ^B00011110
	.byte ^B00011100
	.byte ^B00111100
	.byte ^B00111000
	.byte ^B01110000
	.byte ^B11000000

	btmGroundWidth = 40
	btmGroundFlatY = 29*15*2+SCRBUF+1
btmGroundFlat:
	.byte 0
	.byte 5
	.byte 3; height
	.byte ^B11111111,^B11111111,^B11111111,^B11111111,^B11111111
	.byte ^B00000000,^B00000010,^B00000000,^B10000000,^B00000000
	.byte ^B00110000,^B00000000,^B00100000,^B00001000,^B00000000

	btmGroundHillY = 28*15*2+SCRBUF+1
btmGroundHill:
	.byte 0
	.byte 5
	.byte 4; height
	.byte ^B00000000,^B00111000,^B00000000,^B00000000,^B00000000
	.byte ^B11111111,^B11000111,^B11111000,^B01111111,^B11111111
	.byte ^B11000000,^B00000000,^B01000111,^B10000000,^B01000000
	.byte ^B00000010,^B00000000,^B00000000,^B00000110,^B00000010


	scoreAnimationLength = 8*8
scoreAnimation:
	.byte 0

chars:
	.byte d0-chars, d1-chars, d2-chars, d3-chars, d4-chars, d5-chars, d6-chars, d7-chars, d8-chars, d9-chars
	
d4:
	.byte ^B00000110
	.byte ^B00001110
	.byte ^B00010110
	.byte ^B00010110
	.byte ^B00011111
d1:
	.byte ^B00000110
	.byte ^B00001110
	.byte ^B00000110
	.byte ^B00000110
	.byte ^B00000110
d3:
	.byte ^B00001111
	.byte ^B00000011
	.byte ^B00000110
	.byte ^B00001111
	.byte ^B00000011
d5:
	.byte ^B00011110
	.byte ^B00010000
	.byte ^B00011110
	.byte ^B00000011
	.byte ^B00010011
d8:
	.byte ^B00001110
	.byte ^B00011011
	.byte ^B00001110
	.byte ^B00010111
	.byte ^B00010011
d9:
	.byte ^B00001110
	.byte ^B00011011
	.byte ^B00011011
	.byte ^B00001111
	.byte ^B00000011
d0:
	.byte ^B00001110
	.byte ^B00010111
	.byte ^B00010011
	.byte ^B00010011
	.byte ^B00011011
d6:
	.byte ^B00001110
	.byte ^B00011000
	.byte ^B00011110
	.byte ^B00011011
	.byte ^B00011011
	.byte ^B00001110

d2:
	.byte ^B00011110
	.byte ^B00000011
	.byte ^B00000111
	.byte ^B00001110
	.byte ^B00011000
d7:
	.byte ^B00011111
	.byte ^B00010011
	.byte ^B00000110
	.byte ^B00001100
	.byte ^B00001100
	.byte ^B00001100

slash:
	.byte ^B00000001
	.byte ^B00000011
	.byte ^B00000110
	.byte ^B00001100
	.byte ^B00011000
	.byte ^B00010000

	netPodklucheniyaY = 19*15*2+SCRBUF
	netPodklucheniyaXdef = 33

	.EVEN
netPodklucheniyaX:
	.word netPodklucheniyaXdef
netPodklucheniya:
	.byte 11
	.byte 9
	.byte ^B11001100, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000
	.byte ^B11001100, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000
	.byte ^B11001100, ^B11101111, ^B00011111, ^B00111000, ^B11110110, ^B11001111, ^B01100110, ^B01101100, ^B11100110, ^B11011001, ^B10011110
	.byte ^B11001101, ^B10110110, ^B00011011, ^B01101101, ^B10110111, ^B10011011, ^B01101011, ^B01101101, ^B10110110, ^B11011001, ^B10110110
	.byte ^B11111101, ^B11110110, ^B00011011, ^B01101101, ^B10110111, ^B00011011, ^B01111011, ^B01101101, ^B11110111, ^B11011011, ^B10110110
	.byte ^B11001101, ^B10000110, ^B00011011, ^B01101101, ^B10110111, ^B10011011, ^B01111011, ^B00111101, ^B10000110, ^B11011111, ^B10011110
	.byte ^B11001101, ^B10110110, ^B00011011, ^B01101101, ^B10110110, ^B11011011, ^B01101011, ^B00001101, ^B10110110, ^B11011101, ^B10110110
	.byte ^B11001100, ^B11100110, ^B00011011, ^B00111011, ^B11111110, ^B11110011, ^B01100110, ^B00001100, ^B11100110, ^B11011001, ^B10110110
	.byte ^B00000000, ^B00000000, ^B00000000, ^B00000011, ^B00011000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000

	.EVEN
	kInternetuY = SCRBUF+1
	kInternetuXdef = 64
kInternetuX:
	.word kInternetuXdef
kInternetu:
	.byte 7
	.byte 9
	.byte ^B00000000, ^B11001100, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000
	.byte ^B00000000, ^B11001100, ^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00000000
	.byte ^B11011000, ^B11001101, ^B10111111, ^B01110011, ^B11001101, ^B10011101, ^B11111011
	.byte ^B11110000, ^B11011101, ^B10110110, ^B11011011, ^B01101101, ^B10110110, ^B11011011
	.byte ^B11100000, ^B11111101, ^B11110110, ^B11111011, ^B01101111, ^B10111110, ^B11011011
	.byte ^B11110000, ^B11101101, ^B10110110, ^B11000011, ^B01101101, ^B10110000, ^B11011011
	.byte ^B11011000, ^B11001101, ^B10110110, ^B11011011, ^B01101101, ^B10110110, ^B11001111
	.byte ^B11011000, ^B11001101, ^B10110110, ^B01110011, ^B11001101, ^B10011100, ^B11000011
	.byte ^B00000000, ^B00000000, ^B00000000, ^B00000011, ^B00000000, ^B00000000, ^B00001110

	.EVEN
	azya2019Y = 14*15*2+SCRBUF+1
	azya2019Xdef = 80
azya2019X:
	.word azya2019Xdef
azya2019:
	.byte 5
	.byte 7
	.byte ^B01100111, ^B10100100, ^B11000000, ^B11000110, ^B00100110
	.byte ^B10010000, ^B10100101, ^B00100001, ^B00101001, ^B01101001
	.byte ^B10010001, ^B00100101, ^B00100000, ^B00101001, ^B00101001
	.byte ^B11110010, ^B00011101, ^B11100000, ^B11001001, ^B00100111
	.byte ^B10010100, ^B00000101, ^B00100001, ^B00001001, ^B00100001
	.byte ^B10010111, ^B10011001, ^B00101001, ^B11100110, ^B01110110
	.byte ^B00000000, ^B00000000, ^B00001000, ^B00000000, ^B00000000

	gameOverStrY = 24*15*2+SCRBUF
	gameOverStrX = 30
gameOverStr:
	.byte 8
	.byte 7
	.byte ^B11011001, ^B11001101, ^B10011100, ^B11011000, ^B00011001, ^B10111101, ^B11100110, ^B00110000
	.byte ^B11110011, ^B01101101, ^B10110110, ^B11011000, ^B00011001, ^B10110001, ^B10110110, ^B00110000
	.byte ^B11100011, ^B01101111, ^B10111110, ^B11011000, ^B00011011, ^B10110001, ^B10110111, ^B10110000
	.byte ^B11110011, ^B01101101, ^B10110000, ^B11011000, ^B00011111, ^B10110001, ^B10110110, ^B11110000
	.byte ^B11011011, ^B01101101, ^B10110110, ^B11011000, ^B00011101, ^B10110001, ^B10110110, ^B11110000
	.byte ^B11011001, ^B11001101, ^B10011100, ^B11111100, ^B00011001, ^B10110001, ^B11100111, ^B10110000
	.byte ^B00000000, ^B00000000, ^B00000000, ^B00001100, ^B00000000, ^B00000001, ^B10000000, ^B00000000

END:
	
	.EVEN
TRexSignature = 12345
TRexCheck:
	.word TRexSignature
hiScore:
	.word 0